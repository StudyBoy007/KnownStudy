<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="dao.OrderMapper">
    <resultMap id="BaseResultMap" type="entity.Order">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="course_count" property="courseCount" jdbcType="INTEGER"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="price_total" property="priceTotal" jdbcType="DOUBLE"/>
        <result column="createTime" property="createTime" jdbcType="VARCHAR"/>
        <result column="degree" property="degree" jdbcType="INTEGER"/>
        <association property="user" column="user_id" javaType="entity.User"
                     select="dao.UserMapper.selectByPrimaryKey"/>
        <collection property="courses" javaType="ArrayList" ofType="Course">
            <id column="courseid" property="id" jdbcType="INTEGER"/>
            <result column="cname" property="cname" jdbcType="VARCHAR"/>
            <result column="isfress" property="isfress" jdbcType="INTEGER"/>
            <result column="price" property="price" jdbcType="DOUBLE"/>
            <result column="pic" property="pic" jdbcType="VARCHAR"/>
            <result column="course_path" property="course_path" jdbcType="VARCHAR"/>
            <result column="course_status" property="courseStatus" jdbcType="INTEGER"/>
            <result column="start_time" property="start_time" jdbcType="VARCHAR"/>
            <result column="time" property="time" jdbcType="VARCHAR"/>
            <result column="focus" property="focus" jdbcType="INTEGER"/>
            <result column="buy_num" property="buy_num" jdbcType="INTEGER"/>
            <result column="introduction" property="introduction" jdbcType="VARCHAR"/>
            <association property="courseDirection" column="direction_id" javaType="entity.CourseClass"
                         select="dao.CourseClassMapper.selectByPrimaryKey"/>
        </collection>
    </resultMap>


    <resultMap id="BaseResultMap1" type="entity.Order">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="course_count" property="courseCount" jdbcType="INTEGER"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="price_total" property="priceTotal" jdbcType="DOUBLE"/>
        <result column="createTime" property="createTime" jdbcType="VARCHAR"/>
        <result column="degree" property="degree" jdbcType="INTEGER"/>
        <association property="user" column="user_id" javaType="entity.User"
                     select="dao.UserMapper.selectByPrimaryKey"/>
    </resultMap>



    <resultMap id="BaseResultMap2" type="entity.Course">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="cname" property="cname" jdbcType="VARCHAR"/>
        <!--        <result column="direction_id" property="directionId" jdbcType="INTEGER"/>-->
        <result column="isfress" property="isfress" jdbcType="INTEGER"/>
        <result column="price" property="price" jdbcType="DOUBLE"/>
        <result column="pic" property="pic" jdbcType="VARCHAR"/>
        <result column="course_path" property="course_path" jdbcType="VARCHAR"/>
        <result column="course_status" property="courseStatus" jdbcType="INTEGER"/>
        <result column="start_time" property="start_time" jdbcType="VARCHAR"/>
        <result column="time" property="time" jdbcType="VARCHAR"/>
        <result column="degree" property="degree" jdbcType="VARCHAR"/>
        <result column="focus" property="focus" jdbcType="INTEGER"/>
        <result column="buy_num" property="buy_num" jdbcType="INTEGER"/>
        <result column="introduction" property="introduction" jdbcType="VARCHAR"/>
        <association property="teacher" column="tid" javaType="entity.Teacher"
                     select="dao.TeacherMapper.selectByPrimaryKey"/>
        <association property="courseDirection" column="direction_id" javaType="entity.CourseClass"
                     select="dao.CourseClassMapper.selectByPrimaryKey"/>
    </resultMap>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from `order`
        WHERE id = #{id}
    </delete>

    <!--        <selectKey keyProperty="id" order="AFTER" resultType="int">-->
    <!--            select last_insert_id() as id;-->
    <!--        </selectKey>-->

    <!--    <insert id="insert" parameterType="entity.Order">-->
    <!--        insert into order (course_count, status,-->
    <!--                           price_total, user_id)-->
    <!--        values (#{courseCount}, #{status},-->
    <!--                #{priceTotal}, #{userId})-->
    <!--    </insert>-->
    <insert id="insert" parameterType="entity.Order">
        <selectKey keyProperty="id" order="AFTER" resultType="int">
            select last_insert_id() as id;
        </selectKey>
        INSERT INTO `order`(course_count, STATUS, price_total, user_id,createTime)
        VALUES (#{courseCount}, #{status}, #{priceTotal}, ${user.id},#{createTime})
    </insert>


    <update id="updateByPrimaryKey" parameterType="entity.Order">
        update order

        set course_count = #{courseCount,jdbcType=INTEGER},
            status       = #{status},
            price_total  = #{priceTotal,jdbcType=DOUBLE},
            user_id      = ${user.id},
            createTime   = #{createTime}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap1" parameterType="java.lang.Integer">
        select id, course_count, status, price_total, user_id, degree, createTime
        from `order`
        where id = #{id,jdbcType=INTEGER}
    </select>
    <select id="selectAll" resultMap="BaseResultMap1">
        select id, course_count, status, price_total, user_id, createTime
        from order
    </select>

    <select id="selectUserAllOrder" resultMap="BaseResultMap">
        select o.*,
               c.id AS courseid,
               cname,
               course_path,
               direction_id,
               isfress,
               course_status,
               price,
               pic,
               tid,
               focus,
               start_time,
               time,
               introduction,
               buy_num
        FROM `order` o
                 INNER JOIN order_course m ON o.id = m.oid
                 INNER JOIN course c ON c.id = m.cid AND o.user_id = #{id} AND o.degree = FALSE
            and o.status = #{status};
    </select>

    <select id="selectAllOrderAdminByTime" resultMap="BaseResultMap">
        select o.*,
               c.id AS courseid,
               cname,
               course_path,
               direction_id,
               isfress,
               course_status,
               price,
               pic,
               tid,
               focus,
               start_time,
               time,
               introduction,
               buy_num
        FROM `order` o
                 INNER JOIN order_course m ON o.id = m.oid
                 INNER JOIN course c ON c.id = m.cid
        order BY STR_TO_DATE(createTime, '%Y-%m-%d %H:%i:%s') DESC
    </select>

    <select id="selectAllOrderAdminByTime2" resultMap="BaseResultMap">
        select *
        FROM `order`
        order BY STR_TO_DATE(createTime, '%Y-%m-%d %H:%i:%s') DESC
    </select>


    <insert id="insertMiddle">
        INSERT INTO order_course(oid, cid)
        VALUES
        <foreach collection="courses" item="emp" separator=",">
            (#{oid},#{emp})
        </foreach>
    </insert>

    <select id="selectCourseInOrder" resultType="int">
        select COUNT(*)
        FROM `order` o
                 INNER JOIN order_course m
                            ON o.id = m.oid and o.user_id = #{uid} AND m.cid = #{cid} AND o.degree = FALSE;
    </select>


    <delete id="deleteOrderBatch" parameterType="list">
        delete from `order` where id in
        <foreach collection="orderIds" item="orderId" separator="," open="(" close=")">
            #{orderId}
        </foreach>
    </delete>

    <update id="changeOrderRightByAdmin" parameterType="int">
        update `order`
        set degree= true
        where id = #{oid}
    </update>

    <update id="changeOrderStatus" parameterType="list">
        update `order` set status=true where id in
        <foreach collection="orders" item="orderId" separator="," open="(" close=")">
            #{orderId}
        </foreach>
    </update>

    <select id="selectOrderCourse" parameterType="int" resultType="int">
        select cid
        from order_course
        where oid = #{oid}
    </select>


    <insert id="createConnectionInUserAndCourseBatch">
        INSERT INTO user_course(user_id, course_id,buy_status)
        VALUES
        <foreach collection="courses" item="emp" separator=",">
            (#{uid},#{emp},true)
        </foreach>
    </insert>

    <insert id="createConnectionInUserAndCourse">
        INSERT INTO user_course(user_id, course_id, buy_status)
        VALUES (#{uid}, #{cid}, true)
    </insert>

    <update id="changeBuyCourseState">
        update user_course
        set buy_status= true
        where user_id = #{uid}
          and course_id = #{cid}
    </update>


    <update id="updateOrder" parameterType="entity.Order">
        update
        `order`
        <trim prefix="set" suffixOverrides="," suffix="where id=#{id}">
            <if test="courseCount != null">course_count = #{courseCount},</if>
            <if test="status != null">status = #{status},</if>
            <if test="priceTotal != null">price_total=#{priceTotal},</if>
            <if test="user != null">
                <if test="user.id != null">user_id=${user.id},</if>
            </if>
            <if test="degree != null">degree=#{degree},</if>
            <if test="createTime != null and createTime !=''">createTime=#{createTime},</if>
        </trim>
    </update>


    <insert id="insertOrder" parameterType="entity.Order">
        insert into `order`
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="courseCount != null">
                course_count,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="priceTotal != null">
                price_total,
            </if>
            <if test="user.id != null">
                user_id,
            </if>
            <if test="degree != null">
                degree,
            </if>
            <if test="createTime != null and createTime !=''">
                createTime,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id},
            </if>
            <if test="courseCount != null">
                #{courseCount},
            </if>
            <if test="status != null">
                #{status},
            </if>
            <if test="priceTotal != null">
                #{priceTotal},
            </if>
            <if test="user.id != null">
                ${user.id},
            </if>
            <if test="degree != null">
                #{degree},
            </if>
            <if test="createTime != null and createTime !=''">
                #{createTime},
            </if>
        </trim>
    </insert>


    <select id="selectMiddleInOrderWithCourse" parameterType="int" resultMap="BaseResultMap2">
        SELECT *
        FROM order_course oc,
             course c
        WHERE oc.cid = c.id
          AND oc.oid = #{oid}
    </select>


    <update id="updateOrderContentByOidAndCid">
        UPDATE order_course
        SET cid=#{cid}
        WHERE oid = #{oid}
          and cid = #{oldCid};
    </update>


    <select id="selectMiddleInOrderWithCourseTotalPrice" parameterType="int" resultType="double">
        SELECT SUM(c.price)
        FROM order_course oc,
             course c
        WHERE oc.cid = c.id
          AND oc.oid = #{oid};
    </select>

    <select id="selectMiddleInOrderWithCourseNum" parameterType="int" resultType="int">
        SELECT count(*)
        FROM order_course oc,
             course c
        WHERE oc.cid = c.id
          AND oc.oid = #{oid};
    </select>

    <insert id="insertMiddleInOrderWithCourse">
        insert into order_course
        values (#{oid}, #{cid});
    </insert>


    <select id="selectCourseInOrder2" resultType="int">
        select COUNT(*)
        FROM `order` o
                 INNER JOIN order_course m
                            ON o.id = m.oid and m.cid = #{cid} and o.id = #{oid}
    </select>

    <delete id="deleteMiddleByOidAndCid" parameterType="java.lang.Integer">
        delete
        from order_course
        WHERE oid = #{oid} and cid=#{cid}
    </delete>
</mapper>